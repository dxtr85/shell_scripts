;;; Lock screen
(defparameter *my-lock-command*
  "gnome-screensaver-command -l")
(defcommand lock-screen () ()
  "Lock my screen."
  (run-shell-command *my-lock-command* t))
(run-shell-command "xscreensaver -no-splash")

;;; Log out
(defparameter *my-logout-command*
  "killall stumpwm")
(defcommand log-out () ()
  "Log session out."
  (run-shell-command *my-logout-command* nil))
(define-key *top-map* (kbd "C-M-o") "log-out")
(define-key *top-map* (kbd "s-o") "log-out")

(defcommand battery-percentage () ()
  "Display remaining % of battery."
(run-shell-command "upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep percentage: | tr -s ' ' | cut -d ' ' -f 3 " t))
(define-key *root-map* (kbd "B") "battery-percentage")

(defcommand emacs-anywhere () ()
  "Edit text area with Emacs."
 (run-shell-command "/home/dxtr/.emacs_anywhere/bin/run" nil))
(define-key *root-map* (kbd "E") "emacs-anywhere")

(define-key *top-map* (kbd "C-M-l") "lock-screen")
(define-key *top-map* (kbd "s-l") "lock-screen")
 	

;; turn on/off the mode line for the current head only.
(stumpwm:toggle-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head))
(setf stumpwm:*mode-line-timeout* 1)

(setf stumpwm:*screen-mode-line-format*
      (list "%d | %w | " '(:eval (string-trim '(#\Newline) (battery-percentage)))))

(in-package :stumpwm)
(toggle-mode-line (current-screen) (current-head))
(defun stump-send-click (button iterations)
      "Send a click to the current pointer location.
    `button' is which mouse button to use and `iterations' is how many times to click
    (so twice would be a double-click, for example)."
      (loop while (> iterations 0) do
           (shell-command (cat "xte 'mouseclick " (write-to-string button) "'"))
           (setq iterations (- iterations 1))))
(defcommand new-ratclick ((button "Button: ") (iterations "How many times? "))()
         (stump-send-click button iterations))
(setf *screen-mode-line-format*
  (list "%d | [%g] %W | "))
(defcommand brightness-inc () ()
  (run-shell-command "xbacklight -inc 10"))
(defcommand brightness-dec () ()
  (run-shell-command "xbacklight -dec 5"))
(define-key *top-map* (kbd "s-F4") "brightness-dec")
(define-key *top-map* (kbd "s-F5") "brightness-inc")
(defcommand vol-up () ()
  (run-shell-command "amixer -D pulse sset Master 5%+" t))
(defcommand vol-down () ()
  (run-shell-command "amixer -D pulse sset Master 5%-" t))
(define-key *top-map* (kbd "C-1") "select-window-by-number 1")
(define-key *top-map* (kbd "C-2") "select-window-by-number 2")
(define-key *top-map* (kbd "C-3") "select-window-by-number 3")
(define-key *top-map* (kbd "C-4") "select-window-by-number 4")
(define-key *top-map* (kbd "C-5") "select-window-by-number 5")
(define-key *top-map* (kbd "C-6") "select-window-by-number 6")
(define-key *top-map* (kbd "C-7") "select-window-by-number 7")
(define-key *top-map* (kbd "C-8") "select-window-by-number 8")
(define-key *top-map* (kbd "C-9") "select-window-by-number 9")
(define-key *top-map* (kbd "C-0") "select-window-by-number 0")
(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")
(define-key *top-map* (kbd "s-6") "gselect 6")
(define-key *top-map* (kbd "s-7") "gselect 7")
(define-key *top-map* (kbd "s-8") "gselect 8")
(define-key *top-map* (kbd "s-9") "gselect 9")
(define-key *top-map* (kbd "s-0") "gselect 10")
(define-key *top-map* (kbd "s-F11") "vol-down")
(define-key *top-map* (kbd "s-F12") "vol-up")

(defcommand run-firefox () ()
  (run-shell-command "firefox"))
(defcommand run-spotify () ()
  (run-shell-command "spotify"))
(defcommand run-yousician () ()
  (run-shell-command "yousician"))
(define-key *root-map* (kbd "p") "run-spotify")
(define-key *root-map* (kbd "f") "run-firefox")
(define-key *root-map* (kbd "y") "run-yousician")

;Removal of Ctrl+Space (used to change language)
(define-key *root-map* (kbd "C-SPC") nil)

; Below is not working, probably autokey should be good for it
;(defcommand spotify-next () ()
;  (run-commands "gselect muzyka" "select-window-by-number 0")
;  (run-shell-command "xdotool mousemove --sync 734 718")
;  (run-shell-command "xdotool click 1")
  ;(run-commands "banish" "gprev")
;  (Message "Next song"))
;(define-key *top-map* (kbd "s-F10") "spotify-next")
;(defcommand spotify-prev () ()
;  (run-commands "gselect muzyka" "select-window-by-number 0")
  ;(run-shell-command "xdotool mousemove --sync 640 718" t)
;  (run-shell-command "xdotool click 1" t)
  ;(run-commands "banish" "gprev")
  ;(Message "Previous song")
;  )
;(define-key *top-map* (kbd "s-F8") "spotify-prev")
